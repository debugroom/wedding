
/* Drop Tables */

DROP TABLE IF EXISTS ADDRESS;
DROP TABLE IF EXISTS AFFILIATION;
DROP TABLE IF EXISTS CREDENTIAL;
DROP TABLE IF EXISTS EMAIL;
DROP TABLE IF EXISTS FNCTION;
DROP TABLE IF EXISTS GROUP_NOTIFICATION;
DROP TABLE IF EXISTS GROUP_VISIBLE_MOVIE;
DROP TABLE IF EXISTS GROUP_VISIBLE_PHOTO;
DROP TABLE IF EXISTS GRP;
DROP TABLE IF EXISTS NOTIFICATION;
DROP TABLE IF EXISTS INFOMATION;
DROP TABLE IF EXISTS MENU;
DROP TABLE IF EXISTS MESSAGE;
DROP TABLE IF EXISTS MESSAGE_BOARD;
DROP TABLE IF EXISTS MOVIE;
DROP TABLE IF EXISTS PHOTO;
DROP TABLE IF EXISTS USR;




/* Create Tables */

CREATE TABLE ADDRESS
(
	USER_ID varchar(8) NOT NULL,
	POST_CD char(8),
	ADDRESS varchar(255),
	PRIMARY KEY (USER_ID)
) WITHOUT OIDS;


CREATE TABLE AFFILIATION
(
	GROUP_ID char(10) NOT NULL,
	USER_ID varchar(8) NOT NULL,
	PRIMARY KEY (GROUP_ID, USER_ID),
	UNIQUE (GROUP_ID, USER_ID)
) WITHOUT OIDS;


CREATE TABLE CREDENTIAL
(
	USER_ID varchar(8) NOT NULL,
	CREDENTIAL_TYPE varchar NOT NULL,
	CREDENTIAL_KEY varchar,
	VALID_DATE date,
	PRIMARY KEY (USER_ID, CREDENTIAL_TYPE),
	UNIQUE (USER_ID, CREDENTIAL_TYPE)
) WITHOUT OIDS;


CREATE TABLE EMAIL
(
	USER_ID varchar(8) NOT NULL,
	EMAIL_ID int NOT NULL,
	EMAIL varchar(100),
	PRIMARY KEY (USER_ID, EMAIL_ID),
	UNIQUE (USER_ID, EMAIL_ID)
) WITHOUT OIDS;


CREATE TABLE FNCTION
(
	MENU_ID varchar(4) NOT NULL,
	FUNCTION_ID char(4) NOT NULL,
	FUNCTION_NAME varchar(100),
	USABLE_START_DATE date,
	USABLE_END_DATE date,
	AUTHORITY_LEVEL int,
	PRIMARY KEY (MENU_ID, FUNCTION_ID),
	UNIQUE (MENU_ID, FUNCTION_ID)
) WITHOUT OIDS;


CREATE TABLE GROUP_NOTIFICATION
(
	GROUP_ID char(10) NOT NULL,
	INFO_ID char(8) NOT NULL,
	PRIMARY KEY (GROUP_ID, INFO_ID),
	UNIQUE (GROUP_ID, INFO_ID)
) WITHOUT OIDS;


CREATE TABLE GROUP_VISIBLE_MOVIE
(
	MOVIE_ID char(10) NOT NULL,
	GROUP_ID char(10) NOT NULL,
	PRIMARY KEY (MOVIE_ID, GROUP_ID),
	UNIQUE (MOVIE_ID, GROUP_ID)
) WITHOUT OIDS;


CREATE TABLE GROUP_VISIBLE_PHOTO
(
	GROUP_ID char(10) NOT NULL,
	PHOTO_ID char(10) NOT NULL,
	PRIMARY KEY (GROUP_ID, PHOTO_ID),
	UNIQUE (GROUP_ID, PHOTO_ID)
) WITHOUT OIDS;


CREATE TABLE GRP
(
	GROUP_ID char(10) NOT NULL,
	GROUP_NAME varchar(256),
	PRIMARY KEY (GROUP_ID)
) WITHOUT OIDS;


CREATE TABLE INFOMATION
(
	INFO_ID char(8) NOT NULL,
	TITLE varchar(256),
	INFO varchar,
	REGISTRATED_DATE date,
	RELEASE_DATE date,
	PRIMARY KEY (INFO_ID)
) WITHOUT OIDS;


CREATE TABLE MENU
(
	MENU_ID varchar(4) NOT NULL,
	MENU_NAME varchar,
	USABLE_START_DATE date,
	USABLE_END_DATE date,
	AUTHORITY_LEVEL int,
	PRIMARY KEY (MENU_ID)
) WITHOUT OIDS;


CREATE TABLE MESSAGE
(
	MESSAGE_BOARD_ID char(8) NOT NULL,
	MESSAGE_NO int NOT NULL,
	MESSAGE varchar,
	LIKE_COUNT int,
	RELATED_PHOTO_ID char(10),
	RELATED_MOVIE_ID char(10),
	PRIMARY KEY (MESSAGE_BOARD_ID, MESSAGE_NO),
	UNIQUE (MESSAGE_BOARD_ID, MESSAGE_NO)
) WITHOUT OIDS;


CREATE TABLE MESSAGE_BOARD
(
	MESSAGE_BOARD_ID char(8) NOT NULL,
	TITLE varchar(512),
	PRIMARY KEY (MESSAGE_BOARD_ID)
) WITHOUT OIDS;


CREATE TABLE MOVIE
(
	MOVIE_ID char(10) NOT NULL,
	FILE_PATH varchar,
	isControlled boolean,
	PRIMARY KEY (MOVIE_ID)
) WITHOUT OIDS;


CREATE TABLE NOTIFICATION
(
	INFO_ID char(8) NOT NULL,
	USER_ID varchar(8) NOT NULL,
	PRIMARY KEY (INFO_ID, USER_ID),
	UNIQUE (USER_ID, INFO_ID)
) WITHOUT OIDS;


CREATE TABLE PHOTO
(
	PHOTO_ID char(10) NOT NULL,
	FILE_PATH varchar,
	isControled boolean,
	PRIMARY KEY (PHOTO_ID)
) WITHOUT OIDS;


CREATE TABLE USR
(
	USER_ID varchar(8) NOT NULL,
	USER_NAME varchar,
	LOGIN_ID varchar UNIQUE,
	AUTHORITY_LEVEL int,
	LAST_LOGIN_DATE date,
	PRIMARY KEY (USER_ID)
) WITHOUT OIDS;



/* Create Foreign Keys */

ALTER TABLE AFFILIATION
	ADD FOREIGN KEY (GROUP_ID)
	REFERENCES GRP (GROUP_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE GROUP_NOTIFICATION
	ADD FOREIGN KEY (GROUP_ID)
	REFERENCES GRP (GROUP_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE GROUP_VISIBLE_MOVIE
	ADD FOREIGN KEY (GROUP_ID)
	REFERENCES GRP (GROUP_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE GROUP_VISIBLE_PHOTO
	ADD FOREIGN KEY (GROUP_ID)
	REFERENCES GRP (GROUP_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE GROUP_NOTIFICATION
	ADD FOREIGN KEY (INFO_ID)
	REFERENCES INFOMATION (INFO_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE NOTIFICATION
	ADD FOREIGN KEY (INFO_ID)
	REFERENCES INFOMATION (INFO_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE FNCTION
	ADD FOREIGN KEY (MENU_ID)
	REFERENCES MENU (MENU_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE MESSAGE
	ADD FOREIGN KEY (MESSAGE_BOARD_ID)
	REFERENCES MESSAGE_BOARD (MESSAGE_BOARD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE GROUP_VISIBLE_MOVIE
	ADD FOREIGN KEY (MOVIE_ID)
	REFERENCES MOVIE (MOVIE_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE MESSAGE
	ADD FOREIGN KEY (RELATED_MOVIE_ID)
	REFERENCES MOVIE (MOVIE_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE GROUP_VISIBLE_PHOTO
	ADD FOREIGN KEY (PHOTO_ID)
	REFERENCES PHOTO (PHOTO_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE MESSAGE
	ADD FOREIGN KEY (RELATED_PHOTO_ID)
	REFERENCES PHOTO (PHOTO_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ADDRESS
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USR (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE AFFILIATION
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USR (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE CREDENTIAL
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USR (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE EMAIL
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USR (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE NOTIFICATION
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USR (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



