
/* Drop Tables */

DROP TABLE IF EXISTS ADDRESS;
DROP TABLE IF EXISTS AFFILIATION;
DROP TABLE IF EXISTS CREDENTIAL;
DROP TABLE IF EXISTS EMAIL;
DROP TABLE IF EXISTS FNCTION;
DROP TABLE IF EXISTS GROUP_FOLDER;
DROP TABLE IF EXISTS MOVIE_RELATED_FOLDER;
DROP TABLE IF EXISTS PHOTO_RELATED_FOLDER;
DROP TABLE IF EXISTS USER_RELATED_FOLDER;
DROP TABLE IF EXISTS FOLDER;
DROP TABLE IF EXISTS GROUP_NOTIFICATION;
DROP TABLE IF EXISTS GROUP_VISIBLE_MOVIE;
DROP TABLE IF EXISTS GROUP_VISIBLE_PHOTO;
DROP TABLE IF EXISTS GRP;
DROP TABLE IF EXISTS NOTIFICATION;
DROP TABLE IF EXISTS INFORMATION;
DROP TABLE IF EXISTS MENU;
DROP TABLE IF EXISTS MESSAGE;
DROP TABLE IF EXISTS MESSAGE_BOARD;
DROP TABLE IF EXISTS MOVIE_RELATED_USER;
DROP TABLE IF EXISTS MOVIE;
DROP TABLE IF EXISTS PHOTO_RELATED_USER;
DROP TABLE IF EXISTS PHOTO;
DROP TABLE IF EXISTS REQUEST_STATUS;
DROP TABLE IF EXISTS REQUEST;
DROP TABLE IF EXISTS USR;




/* Create Tables */

-- 住所
CREATE TABLE ADDRESS
(
	-- ユーザID
	USER_ID varchar(8) NOT NULL,
	-- 郵便番号
	POST_CD char(8),
	-- 住所
	ADDRESS varchar(255),
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (USER_ID)
);


-- 所属
CREATE TABLE AFFILIATION
(
	-- グループID
	GROUP_ID char(10) NOT NULL,
	-- ユーザID
	USER_ID varchar(8) NOT NULL,
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (GROUP_ID, USER_ID)
);


-- 認証
CREATE TABLE CREDENTIAL
(
	-- ユーザID
	USER_ID varchar(8) NOT NULL,
	-- 認証タイプ
	CREDENTIAL_TYPE varchar(512) NOT NULL,
	-- 認証キー
	CREDENTIAL_KEY varchar(512),
	-- 有効日時
	VALID_DATE timestamp,
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (USER_ID, CREDENTIAL_TYPE)
);


-- メール
CREATE TABLE EMAIL
(
	-- ユーザID
	USER_ID varchar(8) NOT NULL,
	-- メールID
	EMAIL_ID int NOT NULL,
	-- メールアドレス
	EMAIL varchar(100),
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (USER_ID, EMAIL_ID)
);


-- 機能
CREATE TABLE FNCTION
(
	-- メニューID
	MENU_ID varchar(4) NOT NULL,
	-- 機能ID
	FUNCTION_ID char(4) NOT NULL,
	-- 機能名
	FUNCTION_NAME varchar(100),
	-- URL
	URL varchar(1024),
	-- 使用可能開始日時
	USABLE_START_DATE timestamp,
	-- 使用可能終了日時
	USABLE_END_DATE timestamp,
	-- 権限レベル
	AUTHORITY_LEVEL int,
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (MENU_ID, FUNCTION_ID)
);


-- フォルダ
CREATE TABLE FOLDER
(
	-- フォルダID
	FOLDER_ID char(12) NOT NULL,
	-- フォルダ名
	FOLDER_NAME varchar(512),
	-- 親フォルダID
	PARENT_FOLDER_ID char(12),
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	-- ユーザID
	USER_ID varchar(8) NOT NULL,
	PRIMARY KEY (FOLDER_ID)
);


-- グループフォルダ
CREATE TABLE GROUP_FOLDER
(
	-- フォルダID
	FOLDER_ID char(12) NOT NULL,
	-- グループID
	GROUP_ID char(10) NOT NULL,
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (FOLDER_ID, GROUP_ID)
);


-- グループ通知
CREATE TABLE GROUP_NOTIFICATION
(
	-- グループID
	GROUP_ID char(10) NOT NULL,
	-- インフォID
	INFO_ID char(8) NOT NULL,
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (GROUP_ID, INFO_ID)
);


-- グループ閲覧可能ムービー
CREATE TABLE GROUP_VISIBLE_MOVIE
(
	-- ムービーID
	MOVIE_ID char(10) NOT NULL,
	-- グループID
	GROUP_ID char(10) NOT NULL,
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (MOVIE_ID, GROUP_ID)
);


-- グループ閲覧可能写真
CREATE TABLE GROUP_VISIBLE_PHOTO
(
	-- グループID
	GROUP_ID char(10) NOT NULL,
	-- 写真ID
	PHOTO_ID char(10) NOT NULL,
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (GROUP_ID, PHOTO_ID)
);


-- グループ
CREATE TABLE GRP
(
	-- グループID
	GROUP_ID char(10) NOT NULL,
	-- グループ名
	GROUP_NAME varchar(256),
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (GROUP_ID)
);


-- インフォメーション
CREATE TABLE INFORMATION
(
	-- インフォID
	INFO_ID char(8) NOT NULL,
	-- タイトル
	TITLE varchar(256),
	-- インフォページパス
	INFO_PAGE_PATH varchar(512),
	-- 登録日時
	REGISTRATED_DATE timestamp,
	-- 公開日時
	RELEASE_DATE timestamp,
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (INFO_ID)
);


-- メニュー
CREATE TABLE MENU
(
	-- メニューID
	MENU_ID varchar(4) NOT NULL,
	-- メニュー名
	MENU_NAME varchar(255),
	-- URL
	URL varchar(1024),
	-- 使用可能開始日時
	USABLE_START_DATE timestamp,
	-- 使用可能終了日時
	USABLE_END_DATE timestamp,
	-- 権限レベル
	AUTHORITY_LEVEL int,
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (MENU_ID)
);


-- メッセージ
CREATE TABLE MESSAGE
(
	-- 掲示板ID
	MESSAGE_BOARD_ID char(8) NOT NULL,
	-- メッセージNo
	MESSAGE_NO int NOT NULL,
	-- メッセージ
	MESSAGE varchar(1024),
	-- いいねカウント
	LIKE_COUNT int,
	-- 関連写真ID
	RELATED_PHOTO_ID char(10),
	-- 関連ムービーID
	RELATED_MOVIE_ID char(10),
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (MESSAGE_BOARD_ID, MESSAGE_NO)
);


-- 掲示板
CREATE TABLE MESSAGE_BOARD
(
	-- 掲示板ID
	MESSAGE_BOARD_ID char(8) NOT NULL,
	-- タイトル
	TITLE varchar(512),
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (MESSAGE_BOARD_ID)
);


-- ムービー
CREATE TABLE MOVIE
(
	-- ムービーID
	MOVIE_ID char(10) NOT NULL,
	-- ファイルパス
	FILE_PATH varchar(512),
	-- サムネイルファイルパス
	THUMBNAIL_FILE_PATH varchar(512),
	-- 制御有無
	IS_CONTROLED boolean,
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (MOVIE_ID)
);


-- フォルダ関連ムービー
CREATE TABLE MOVIE_RELATED_FOLDER
(
	-- ムービーID
	MOVIE_ID char(10) NOT NULL,
	-- フォルダID
	FOLDER_ID char(12) NOT NULL,
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (MOVIE_ID, FOLDER_ID)
);


-- ユーザ関連ムービー
CREATE TABLE MOVIE_RELATED_USER
(
	-- ムービーID
	MOVIE_ID char(10) NOT NULL,
	-- ユーザID
	USER_ID varchar(8) NOT NULL,
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (MOVIE_ID, USER_ID)
);


-- 通知
CREATE TABLE NOTIFICATION
(
	-- インフォID
	INFO_ID char(8) NOT NULL,
	-- ユーザID
	USER_ID varchar(8) NOT NULL,
	-- アクセス済み
	IS_ACCESSED boolean,
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (INFO_ID, USER_ID)
);


-- 写真
CREATE TABLE PHOTO
(
	-- 写真ID
	PHOTO_ID char(10) NOT NULL,
	-- ファイルパス
	FILE_PATH varchar(512),
	-- サムネイルファイルパス
	THUMBNAIL_FILE_PATH varchar(512),
	-- 制御有無
	IS_CONTROLED boolean,
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (PHOTO_ID)
);


-- フォルダ関連フォト
CREATE TABLE PHOTO_RELATED_FOLDER
(
	-- 写真ID
	PHOTO_ID char(10) NOT NULL,
	-- フォルダID
	FOLDER_ID char(12) NOT NULL,
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (PHOTO_ID, FOLDER_ID)
);


-- ユーザ関連フォト
CREATE TABLE PHOTO_RELATED_USER
(
	-- 写真ID
	PHOTO_ID char(10) NOT NULL,
	-- ユーザID
	USER_ID varchar(8) NOT NULL,
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (PHOTO_ID, USER_ID)
);


-- 依頼
CREATE TABLE REQUEST
(
	-- 依頼ID
	REQUEST_ID char(4) NOT NULL,
	-- タイトル
	TITLE varchar(512),
	-- 依頼内容
	REQUEST_CONTENTS varchar(1024),
	-- 登録日時
	REGISTRATED_DATE timestamp,
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (REQUEST_ID)
);


-- 依頼状況
CREATE TABLE REQUEST_STATUS
(
	-- 依頼ID
	REQUEST_ID char(4) NOT NULL,
	-- ユーザID
	USER_ID varchar(8) NOT NULL,
	-- 回答済み
	IS_ANSWERED boolean,
	-- 承認
	IS_APPROVED boolean,
	-- 回答内容
	RESPONSE varchar(1024),
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (REQUEST_ID, USER_ID)
);


-- ユーザ関連フォルダ
CREATE TABLE USER_RELATED_FOLDER
(
	-- フォルダID
	FOLDER_ID char(12) NOT NULL,
	-- ユーザID
	USER_ID varchar(8) NOT NULL,
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (FOLDER_ID, USER_ID)
);


-- ユーザ
CREATE TABLE USR
(
	-- ユーザID
	USER_ID varchar(8) NOT NULL,
	-- ユーザ名
	USER_NAME varchar(512),
	-- ログインID
	LOGIN_ID varchar(32) UNIQUE,
	-- 画像ファイルパス
	IMAGE_FILE_PATH varchar(512),
	-- 権限レベル
	AUTHORITY_LEVEL int,
	-- 最終ログイン日時
	LAST_LOGIN_DATE timestamp,
	-- バージョン
	VER int,
	-- 最終更新日時
	LAST_UPDATED_DATE timestamp,
	PRIMARY KEY (USER_ID)
);



/* Create Foreign Keys */

ALTER TABLE GROUP_FOLDER
	ADD FOREIGN KEY (FOLDER_ID)
	REFERENCES FOLDER (FOLDER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE MOVIE_RELATED_FOLDER
	ADD FOREIGN KEY (FOLDER_ID)
	REFERENCES FOLDER (FOLDER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PHOTO_RELATED_FOLDER
	ADD FOREIGN KEY (FOLDER_ID)
	REFERENCES FOLDER (FOLDER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE USER_RELATED_FOLDER
	ADD FOREIGN KEY (FOLDER_ID)
	REFERENCES FOLDER (FOLDER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE AFFILIATION
	ADD FOREIGN KEY (GROUP_ID)
	REFERENCES GRP (GROUP_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE GROUP_FOLDER
	ADD FOREIGN KEY (GROUP_ID)
	REFERENCES GRP (GROUP_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE GROUP_NOTIFICATION
	ADD FOREIGN KEY (GROUP_ID)
	REFERENCES GRP (GROUP_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE GROUP_VISIBLE_MOVIE
	ADD FOREIGN KEY (GROUP_ID)
	REFERENCES GRP (GROUP_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE GROUP_VISIBLE_PHOTO
	ADD FOREIGN KEY (GROUP_ID)
	REFERENCES GRP (GROUP_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE GROUP_NOTIFICATION
	ADD FOREIGN KEY (INFO_ID)
	REFERENCES INFORMATION (INFO_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE NOTIFICATION
	ADD FOREIGN KEY (INFO_ID)
	REFERENCES INFORMATION (INFO_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE FNCTION
	ADD FOREIGN KEY (MENU_ID)
	REFERENCES MENU (MENU_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE MESSAGE
	ADD FOREIGN KEY (MESSAGE_BOARD_ID)
	REFERENCES MESSAGE_BOARD (MESSAGE_BOARD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE GROUP_VISIBLE_MOVIE
	ADD FOREIGN KEY (MOVIE_ID)
	REFERENCES MOVIE (MOVIE_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE MESSAGE
	ADD FOREIGN KEY (RELATED_MOVIE_ID)
	REFERENCES MOVIE (MOVIE_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE MOVIE_RELATED_FOLDER
	ADD FOREIGN KEY (MOVIE_ID)
	REFERENCES MOVIE (MOVIE_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE MOVIE_RELATED_USER
	ADD FOREIGN KEY (MOVIE_ID)
	REFERENCES MOVIE (MOVIE_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE GROUP_VISIBLE_PHOTO
	ADD FOREIGN KEY (PHOTO_ID)
	REFERENCES PHOTO (PHOTO_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE MESSAGE
	ADD FOREIGN KEY (RELATED_PHOTO_ID)
	REFERENCES PHOTO (PHOTO_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PHOTO_RELATED_FOLDER
	ADD FOREIGN KEY (PHOTO_ID)
	REFERENCES PHOTO (PHOTO_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PHOTO_RELATED_USER
	ADD FOREIGN KEY (PHOTO_ID)
	REFERENCES PHOTO (PHOTO_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE REQUEST_STATUS
	ADD FOREIGN KEY (REQUEST_ID)
	REFERENCES REQUEST (REQUEST_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ADDRESS
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USR (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE AFFILIATION
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USR (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE CREDENTIAL
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USR (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE EMAIL
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USR (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE FOLDER
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USR (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE MOVIE_RELATED_USER
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USR (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE NOTIFICATION
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USR (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PHOTO_RELATED_USER
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USR (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE REQUEST_STATUS
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USR (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE USER_RELATED_FOLDER
	ADD FOREIGN KEY (USER_ID)
	REFERENCES USR (USER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



